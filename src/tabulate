#!/usr/bin/env python3
import shutil
import sys
import argparse
import logging
import itertools
import copy
import abc

try:
    from cjkwrap import cjklen
except ImportError:
    cjklen = len

# use as `textwrap.wrap`
try:
    import cjkwrap as textwrap
except ImportError:
    import textwrap

ERRNO_ARGS = 1
ERRNO_IO = 2
ERRNO_WRAP = 4


def make_parser():
    parser = argparse.ArgumentParser(
        description=('Make fixed-width plaintext table with multi-line cell '
                     'supports. What plaintext table content is expected: '
                     '<TAB> will be regarded as field delimiter, <LF> '
                     '(or <CRLF> if on Windows) as row delimiter, and all the '
                     'others as cell content.'))
    parser.add_argument('-W', '--widths', metavar='WIDTH_LIST',
                        type=width_list,
                        help=('a comma-separated list of WIDTH (int) or `-\''
                              ' specifying the width of each column; `-\' '
                              'implies that the width of the underlying '
                              'column can be decided by the program. There '
                              'can be at most one `-\'. Each WIDTH defines '
                              'the maximum number of characters in the cell '
                              'per row. Note, however, that the sum of '
                              'WIDTHs does not necessarily equal to the '
                              'width of table, since the table layout is '
                              'not taken into account with WIDTHs. One CJK '
                              'character takes up two units of width'))
    parser.add_argument('-T', '--table-width', type=table_width,
                        dest='total_width', metavar='TABLE_WIDTH',
                        help=('the total table width. If specified, unless '
                              'WIDTH_LIST contains `-\', and TABLE_WIDTH '
                              'is sufficiently large, TABLE_WIDTH may not '
                              'imply the actual table width rendered. '
                              'Default to terminal width'))
    parser.add_argument('-L', '--layout', default='grid',
                        help='table layout; default to %(default)s',
                        choices=['grid', 'hline'])
    parser.add_argument('-S', '--strict', action='store_true',
                        help=('to enable strict mode, where wrapped lines '
                              'exceeding the WIDTHs that will ruin the table '
                              'layout are forbidden'))
    parser.add_argument('-B', '--no-break-long-words', action='store_false',
                        dest='break_long_words',
                        help=('to not break long words even if necessary, '
                              'default to break long words'))
    parser.add_argument('-d', '--delimiter', default='\t',
                        help=('the field delimiter in input data, default to '
                              '<TAB>'))
    parser.add_argument('filename', nargs='?', metavar='FILE',
                        help='table content from which to read; if FILE is '
                             'not specified, the table content will be '
                             'expected from stdin')
    return parser


def width_list(string):
    try:
        widths = [None if token == '-' else int(token)
                  for token in string.strip().split(',')]
    except ValueError as e:
        raise argparse.ArgumentTypeError from e
    for w in widths:
        if w is not None and w <= 0:
            raise argparse.ArgumentTypeError(
                '(WIDTH_LIST) width must be positive')
    if widths.count(None) > 1:
        raise argparse.ArgumentTypeError(
            '(WIDTH_LIST) at most one `-\' is allowed')
    return widths


def table_width(string):
    try:
        width = int(string)
    except (ValueError, TypeError) as e:
        raise argparse.ArgumentTypeError from e
    if width <= 0:
        raise argparse.ArgumentTypeError('TABLE_WIDTH must be positive')
    return width


def read_table(filename, delimiter):
    """
    Read table content as [[field1, field2, ...], ...], and standardize the
    table.

    :param filename: the text filename, or ``None`` to read stdin
    :type filename: Optional[str]
    :param delimiter: the field delimiter
    :type delimiter: str
    :return: the list of content
    :rtype: List[List[str]]
    """

    def as_table(rows):
        return [row.rstrip('\n').split(delimiter) for row in rows]

    if not filename:
        content = as_table(sys.stdin)
    else:
        try:
            with open(filename) as infile:
                content = as_table(infile)
        except IOError:
            logging.error('Failed to read "%s"', filename)
            sys.exit(ERRNO_IO)
    return content


def standardize_table(content):
    """
    Find the maximum number of fields per row, as `n_columns`, and append
    empty string to the end of each row so that every row contains
    ``n_columns`` fields.

    :param content: table content as [[field1, field2, ...], ...]
    :type content: List[List[str]]
    :return: ``n_columns``
    :rtype: int
    """
    n_columns = max(map(len, content))
    for row in content:
        row.extend('' for _ in range(n_columns - len(row)))
    return n_columns


def wrap_row(row, widths, break_long_words):
    """
    Wrap each field of a row of the table.

    >>> wrap_row(['abcde', '12345 89 987 654321'], [6, 10], True)
    [['abcde'], ['12345 89', '987 654321']]

    :param row: a row of the table
    :type row: List[str]
    :param widths: the max widths of each field
    :type widths: List[int]
    :param break_long_words: whether to break long words when necessary
    :type break_long_words: bool
    :return: the wrapped list of a row of the table
    :rtype: List[List[str]]
    """
    return [textwrap.wrap(field, widths[i], break_long_words=break_long_words)
            for i, field in enumerate(row)]


class WrappedLineTooLongError(Exception):
    def __init__(self, rowid, colid, string):
        self.rowid = rowid
        self.colid = colid
        self.string = string

    def __repr__(self):
        return '{}(rowid={}, colid={}, string={})'.format(
            type(self).__name__, self.rowid, self.colid, self.string)

    def __str__(self):
        return 'Wrapped line "{}" too long at row {} col {}'.format(
            self.string, self.rowid, self.colid)


def check_wrapped_row(wrapped_row, widths) -> None:
    """
    Check if any wrapped line exceeds width.

    >>> check_wrapped_row([['abcde'], ['12345 89', '987 654321']], [6, 10])
    >>> try:
    ...     check_wrapped_row([['abcde'], ['12345 89', '987 654321']], [6, 9])
    ... except WrappedLineTooLongError:
    ...     pass
    ... else:
    ...     assert False, 'expecting WrappedLineTooLong to be raised'

    :param wrapped_row: the wrapped list of a row of the table
    :type wrapped_row: List[List[str]]
    :param widths: the max widths of each field
    :type widths: List[int]
    :raise WrappedLineTooLongError: if any wrapped line exceeds width
    """
    for j, cell in enumerate(wrapped_row):
        for i, cell_row in enumerate(cell):
            if cjklen(cell_row) > widths[j]:
                raise WrappedLineTooLongError(i + 1, j + 1, cell_row)


def fill_wrapped_row(wrapped_row, widths):
    """
    >>> fill_wrapped_row([['abcde'], ['12345 89', '987 654321']], [12, 14])
    [['abcde       ', '            '], ['12345 89      ', '987 654321    ']]

    :param wrapped_row: the wrapped list of a row of the table
    :type wrapped_row: List[List[str]]
    :param widths: the max widths of each field
    :type widths: List[int]
    :return: the filled wrapped list of a row of the table
    :rtype: List[List[str]]
    """
    max_n_cell_rows = max(map(len, wrapped_row))
    return [([cell_row + ' ' * (widths[i] - cjklen(cell_row))
              for cell_row in cell]
             + [' ' * widths[i] for _ in range(max_n_cell_rows - len(cell))])
            for i, cell in enumerate(wrapped_row)]


class TableRenderer(abc.ABC):
    """
    Abstract base class of all table renderer.
    """

    @abc.abstractmethod
    def calc_layout_width(self, n_columns):
        """
        :param n_columns: the number of columns of the table
        :type n_columns: int
        :return: the part of table width attributed to by the table layout
        :rtype: int
        """
        ...

    @abc.abstractmethod
    def render_table(self, wrapped_and_filled, widths):
        """
        Render table.

        :param wrapped_and_filled: the output of `fill_wrapped_row` on each
               row, the filled wrapped list of a row of the table
        :type wrapped_and_filled: List[List[List[str]]]
        :param widths: the max widths of each field
        :type widths: List[int]
        :return: the rendered table
        :rtype: str
        """
        ...


# name: grid
class GridTableRenderer(TableRenderer):
    """
    Sample:

    +------+-------+
    | abcd | ab ab |
    |      | b abc |
    +------+-------+
    | a cd | bac b |
    +------+-------+
    """

    def calc_layout_width(self, n_columns):
        # 3 * (n_columns - 1) + 2 + 2
        return 3 * n_columns + 1

    def render_table(self, wrapped_and_filled, widths):
        padded = [[[c.join('  ')
                    for c in r]
                   for r in col]
                  for col in wrapped_and_filled]
        delimed = [list(map('|'.join, zip(*p))) for p in padded]
        delimed = [[r.join('||') for r in col] for col in delimed]
        hrule = '+'.join('-' * (w + 2) for w in widths).join('++')
        table = [[hrule]]
        for x in delimed:
            table.extend([x, [hrule]])
        return '\n'.join(itertools.chain.from_iterable(table))


# name: hline
class HorizontalLinesTableRenderer(TableRenderer):
    """
    Sample:

    ====  =====
    abcd  ab ab
          b abc
    ----  -----
    a cd  bac b
    ====  =====
    """
    def calc_layout_width(self, n_columns):
        return 2 * (n_columns - 1)

    def render_table(self, wrapped_and_filled, widths):
        double_hrule = '  '.join('=' * w for w in widths)
        hrule = '  '.join('-' * w for w in widths)
        table = [[double_hrule]]
        for row in wrapped_and_filled:
            table.append(map('  '.join, zip(*row)))
            table.append([hrule])
        del table[-1]
        table.append([double_hrule])
        return '\n'.join(itertools.chain.from_iterable(table))


def complete_widths(user_widths, user_total_width, n_columns, table_renderer):
    """
    Complete the width list provided by end user (as returned by
    ``width_list``) in case there's ``None`` in it. If there's already no
    ``None``, ``user_widths`` will be returned as is.

    :param user_widths: the width list provided by the user
    :type user_widths: List[Optional[int]]
    :param user_total_width: the total width provided by the user
    :type user_total_width: Optional[int]
    :param n_columns: the number of columns of the table
    :type n_columns: int
    :param table_renderer: the table renderer object
    :type table_renderer: TableRenderer
    :return: the width list without ``None``
    :rtype: List[int]
    """
    widths = copy.copy(user_widths)
    try:
        none_index = user_widths.index(None)
    except ValueError:
        logging.info('No `-\' in WIDTH_LIST; TABLE_WIDTH will be ignored')
    else:
        user_total_width = (user_total_width
                            or shutil.get_terminal_size().columns)
        # the width to be set at the `None` position
        none_width = (user_total_width
                      - table_renderer.calc_layout_width(n_columns)
                      - sum(filter(None, widths)))
        if none_width <= 0:
            logging.error('TABLE_WIDTH is not big enough!')
            sys.exit(ERRNO_ARGS)
        widths[none_index] = none_width
    return widths


def get_table_renderer(layout):
    """
    :param layout: the layout name
    :type layout: str
    :return: the table renderer instance
    :rtype: TableRenderer
    """
    return {
        'grid': GridTableRenderer,
        'hline': HorizontalLinesTableRenderer,
    }[layout]()


def main():
    logging.basicConfig(format='%(filename)s: %(levelname)s: %(message)s')
    args = make_parser().parse_args()

    table_renderer = get_table_renderer(args.layout)

    try:
        content = read_table(args.filename, args.delimiter)
        n_columns = standardize_table(content)
        widths = complete_widths(args.widths, args.total_width, n_columns,
                                 table_renderer)

        wrapped_content = [wrap_row(row, widths, args.break_long_words)
                           for row in content]
        for wrapped_row in wrapped_content:
            try:
                check_wrapped_row(wrapped_row, widths)
            except WrappedLineTooLongError as e:
                if args.strict:
                    logging.error('%s', e)
                    sys.exit(ERRNO_WRAP)
                else:
                    logging.warning('%s', e)
        filled_content = [fill_wrapped_row(wrapped_row, widths)
                          for wrapped_row in wrapped_content]
        print(table_renderer.render_table(filled_content, widths))
    except KeyboardInterrupt:
        pass
    except BrokenPipeError:
        sys.stderr.close()
    finally:
        logging.shutdown()


if __name__ == '__main__':
    main()
